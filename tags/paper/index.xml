<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper on Li Kangwei</title>
    <link>https://blog.pkulkw.me/tags/paper/</link>
    <description>Recent content in Paper on Li Kangwei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 May 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://blog.pkulkw.me/tags/paper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>论文笔记：PRIMES is in P</title>
      <link>https://blog.pkulkw.me/p/piip/</link>
      <pubDate>Fri, 21 May 2021 09:00:00 +0800</pubDate>
      
      <guid>https://blog.pkulkw.me/p/piip/</guid>
      <description> &amp;ldquo;PRIMES is in P&amp;rdquo; 由三位来自印度坎普尔理工学院的研究者 Manindra Agrawal、Neeraj Kayal 和 Nitin Saxena 于 2002 年发表，提出了 AKS 素性测试算法。
 值得注意的是，该算法是第一个被发表的一般的、多项式的、确定性的、无仰赖的素数判定算法，也正因如此，其重要性不言而喻。
 一般的：相比于一些高速判定算法只适用于满足特定条件的素数，AKS 算法可以用于检测任何给定数字是否为素数； 多项式的：AKS 算法的最长运行时间可以被表示为一个目标数字长度的多项式； 确定性的：AKS 算法可以确定性地判断给定数字是否为素数； 无仰赖的：AKS 算法并未仰赖于任何未证明猜想。  介绍与引入 </description>
    </item>
    
    <item>
      <title>论文笔记：Mathematical Analysis of Algorithms</title>
      <link>https://blog.pkulkw.me/p/knuth-paper/</link>
      <pubDate>Thu, 18 Mar 2021 09:00:00 +0800</pubDate>
      
      <guid>https://blog.pkulkw.me/p/knuth-paper/</guid>
      <description>&amp;ldquo;Mathematical Analysis of Algorithms&amp;rdquo; 由著名的计算机科学家 Donald Knuth 于 1971 年发表。
 这篇文章主要引入两个具体的算法问题来展现算法效率分析的典型方法。
 Rearranging data without using auxiliary memory space. 不使用额外的存储空间的排序算法（原地排序）。 Finding the element of rank $t$ when $n$ elements are ranked by some linear ordering relation. 在线性有序表中查找特定值。  Introduction 算法分析领域的核心目标是研究如何量化分析各个不同算法的好坏，主要的两类问题如下：
 Analysis of a particular algorithm. 分析某些特定算法的基本特征。  Frequency analysis. 分析算法的各部分的执行次数情况，实际上是分析时间复杂度。 Storage analysis. 分析算法占用的内存资源情况，实际上是分析空间复杂度。   Analysis of a class of algorithms. 分析解决一类问题的所有算法，尝试找到最优的算法。  此外，本文指出第 2 类问题的两点弊端：
 对技术性调整敏感。某些微小改变可能对最优算法的选取产生巨大的影响，因此研究往往被局限在一个有限范围内； 难以控制模型的拟合性。第 2 类问题的分析往往过于复杂，而简化模型可能与现实相悖，导致算法分析出现失误。  正因此，尽管第 1 类问题没有第 2 类问题有趣，但在实际应用中也可以发挥出巨大作用。在接下来的核心篇幅中，Knuth 便借助两个实例来具体阐述算法分析的基本思路。</description>
    </item>
    
  </channel>
</rss>
