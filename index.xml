<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Li Kangwei</title>
        <link>https://blog.pkulkw.me/</link>
        <description>Recent content on Li Kangwei</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 08 Aug 2021 10:25:00 +0800</lastBuildDate><atom:link href="https://blog.pkulkw.me/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《暴裂无声》：人性与法律的交叉地带</title>
        <link>https://blog.pkulkw.me/p/wrathofsilence/</link>
        <pubDate>Sun, 08 Aug 2021 10:25:00 +0800</pubDate>
        
        <guid>https://blog.pkulkw.me/p/wrathofsilence/</guid>
        <description>&lt;img src="https://blog.pkulkw.me/p/wrathofsilence/cover.jpg" alt="Featured image of post 《暴裂无声》：人性与法律的交叉地带" /&gt;&lt;p&gt;【&lt;strong&gt;摘要&lt;/strong&gt;】近年来，一批优秀的国产犯罪悬疑类型片正不断涌现，而忻钰坤导演的作品《暴裂无声》无疑是其中极具典型性的一部佳片，它如手术刀般锐利地将现代中国社会中问题的症结赤裸裸的展现在观影者眼前，引发我们深深的反思。本文首先对电影《暴裂无声》的情节加以简明扼要的介绍，在此基础上对影片中的重点情节进行剖析，并力图解析阐述影片背后的寓意中与法律领域的契合点，展现出电影中法律与人性的博弈。&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;关键词&lt;/strong&gt;】《暴裂无声》；影评；忻钰坤；法律与人性&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;影片简介与情节梗概&#34;&gt;影片简介与情节梗概&lt;/h2&gt;
&lt;h3 id=&#34;影片基本信息&#34;&gt;影片基本信息&lt;/h3&gt;
&lt;p&gt;本文所分析的影片中文片名为《暴裂无声》，曾用片名《寻山》、《恶人》、《山野追踪》，英文译名为 Wrath Of Silence，片长 120 分钟，电影的导演与编剧为青年导演忻钰坤，由宋洋、姜武、袁文康、谭卓等主演。该片于 2017 年 7 月 27 日在西宁 FIRST 青年影展进行首映，2018 年 4 月 4 日在中国大陆正式上映，并在第二届澳门国际影展中斩获评审团特别奖和最佳男主角奖。影片故事发生的具体背景为 2004 年的冬天的一个内蒙古矿业小镇。&lt;/p&gt;
&lt;h3 id=&#34;主要人物角色&#34;&gt;主要人物角色&lt;/h3&gt;
&lt;p&gt;《暴裂无声》中的主要人物有三位，分别是哑巴矿工张保民（宋洋饰）、城中律师徐文杰（袁文康饰）以及弘昌矿业集团董事长昌万年（姜武饰）。张保民实质上是社会中底层人物的一个写照，而相对应的，徐文杰与昌万年则分别代表着中层阶级和上层人士，这样的人物角色塑造不仅为剧情的多线发展提供了基本要素，更为影片的社会主题表现奠定了总的基调。&lt;/p&gt;
&lt;h3 id=&#34;故事情节梗概&#34;&gt;故事情节梗概&lt;/h3&gt;
&lt;p&gt;影片以矿工张保民的寻子历程作为主线展开，副线则是律师徐文杰作为昌万年的法律顾问帮其打官司而与张保民寻子产生关联。这样的一主一副的线索设定使得观影者始终为故事的情节发展与人物命运而揪心，让整部影片在保证情节流畅自然的基础上极具悬疑色彩。&lt;/p&gt;
&lt;p&gt;在一个荒蛮的矿区小镇里，矿工张保民得知儿子张磊在放羊途中意外失踪，于是毅然踏上寻子之路。而在另一个矿厂里打探消息时，恰好遇上昌万年手下与矿厂工人发生冲突，而张保民为了自卫砸破了昌万年的汽车前车窗。昌万年了解到砸破车窗的是张保民，又了解到他正在寻找放羊时失踪的儿子，昌万年这才发现张保民正是自己误杀的孩子的父亲。而昌万年一方面为了隐瞒自己杀人的消息，另一方面又对张保民怀有一丝愧疚之心，因此没有刻意找张保民的麻烦。&lt;/p&gt;
&lt;p&gt;然而此时张保民开始怀疑昌万年起来，他通过跟踪昌万年的手下发现了一个被装入麻袋的孩子，将藏于山洞。律师徐文杰因为掌握了大量不利于昌万年的证据，昌万年的手下将其女儿绑架以威胁徐文杰就范，这个麻袋中的女孩正好是律师徐文杰的女儿媛媛。三人在山洞附近对峙，最终律徐文杰成功地找回了自己的女儿，然而张保民儿子张磊的死亡却被徐文杰与昌万年继续隐瞒了下来。根据片尾字幕阐述的结局，警方展开积极调查后最终将徐文杰和昌万年绳之以法，而张磊的尸体却始终没能找到。&lt;/p&gt;
&lt;p&gt;在影片的较为复杂的叙事结构中，故事情节的发展脉络在初看时可能并不清晰，但是导演将画面聚焦于人物与环境，巧妙的运用镜头语言，将故事的全貌展现在观影者眼前。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;重点情节剖析&#34;&gt;重点情节剖析&lt;/h2&gt;
&lt;p&gt;《暴裂无声》绝不仅仅只是一部供娱乐消费的爆米花式的犯罪片，它具有着较为深远的主题和意义表达，将人性之恶的表面的薄纱大力撕下，把工业化进程下人性之恶的真相赤裸裸的展现在我们眼前。而片尾处的一段情节更是整部影片的升华所在，在此，以影片的结局的情节发展作为重点分析的关键部分，对徐文杰等三位主角的内心人性与法律规制之间的矛盾分别进行阐述分析。&lt;/p&gt;
&lt;h3 id=&#34;关键情节还原&#34;&gt;关键情节还原&lt;/h3&gt;
&lt;p&gt;随着剧情的发展逐渐趋向白热化，张保民、徐文杰和昌万年在山洞处对峙，此时徐文杰与昌万年都知晓张保民的儿子张磊已经死亡，但各自的心里都打着小算盘。徐文杰对昌万年说道：“你知道吗，他儿子丢了。”昌万年则回答：“我知道他儿子丢了。”在当时的对话情境之下，徐昌二人都不约而同地选择了隐瞒张磊已死亡的事实。直到徐文杰与张保民到达藏匿徐的女儿媛媛的山洞时，情节进一步的向着未知的方向发展，由于这个山洞恰好是徐昌二人在杀害张磊时藏尸的地方，因此徐文杰表现出了高度紧张的神态甚至正欲供认不讳，然而在发现自己所做的坏事并未被张保民识破后转而对张磊的事情闭口不提。&lt;/p&gt;
&lt;p&gt;镜头一转，徐文杰与昌万年被警察抓获在审讯室内接受审问，在承认并交代了基本的非法采矿的罪名后，警察向昌万年问道：“还有什么要交代的？”昌万年低头直言：“没有了”。而另外一边的审讯室内，警察询问徐文杰：“再想想，还有什么要说的？”徐文杰在沉默数秒后缓缓带上金丝眼镜，面无表情道：“没了”。随着徐文杰最后做出否认，张保民身后的山丘轰然崩裂，影片达到最终的高潮，让观影者震撼不已。&lt;/p&gt;
&lt;h3 id=&#34;矛盾的生发&#34;&gt;矛盾的生发&lt;/h3&gt;
&lt;p&gt;在影片的这一段情节中，徐文杰和昌万年的心理状态似乎很难让人捉摸透彻，而正是两人的刻意隐瞒，使得故事背后的真相久久不能浮出水面。在人物形象的塑造上，徐文杰和昌万年分别作为中层阶级和上层阶级的象征，他们的心理状态与内心活动实质上反映出了弱肉强食的社会生态中的“环环相暴” 的阶层关系。&lt;/p&gt;
&lt;p&gt;仔细对人物的背景进行分析，他们似乎有很充分的理由对犯下的罪过进行隐瞒：徐文杰有着一个正茁壮成长的乖巧女儿媛媛，他爱着自己的女儿不希望她卷入事件之中受到伤害，而昌万年则有着雄厚的家业，对金钱权力的追求蒙蔽了他的良知。正因如此，他们在接受审讯时不约而同地表现出面不改色的状态倒是显得再正常不过了。&lt;/p&gt;
&lt;p&gt;对于徐文杰和昌万年两人而言，他们在知晓自身罪名的情况下都选择了沉默，这并不是一个简简单单的的巧合。在实质上，自身人性的弱点驱使徐文杰和昌万年思考这样一个问题：若是坦白张磊的死亡与自己有着密切的关系，那么会带来怎样的后果？选择道义上的正义将直接对自身的利益产生破坏，而若是违背道德则可以保全自己。在这种情形下，法律的条文规约似乎只是一纸空文，当法律的正义和人性的恶欲产生矛盾，法律的正义该如何得到保证？而法律作为在社会文明进程中解决一切问题的最高形式，在复杂的人性背后的各种冲突之下又该如何以法律来对失序社会加以规制？&lt;/p&gt;
&lt;h3 id=&#34;徐文杰的内心挣扎&#34;&gt;徐文杰的内心挣扎&lt;/h3&gt;
&lt;p&gt;相对于另外两位主要人物张保民与昌万年，本文的讨论更多的聚焦于这段情节中更具典型性的律师徐文杰。&lt;/p&gt;
&lt;p&gt;影片极为巧妙地将徐文杰的身份塑造为一名律师，而律师的职业形象特征决定了他地话语权不仅代表着自己，更是法律的尊严。而徐文杰的最终选择隐瞒事实的决定实质上是对法律的蔑视，在他面不改色的说没有需要交代的事情时，法律权威的大厦已然崩塌。然而，在影片中，每个人物都并纯粹的恶抑或是纯粹的善，在人性的善与恶之间的灰色地带中，法律的公正性荡然无存。&lt;/p&gt;
&lt;p&gt;福柯在《规训与惩罚》中这样表述道：“&lt;strong&gt;知识为权力服务，权力才鼓励知识，也不仅仅是因为知识有用，权力才使用知识。&lt;/strong&gt;”律师的角色理应作为底层民众伸张正义的援手，然后徐文杰本身作为中层阶级的象征与底层民众和上层人士之间有着天然而不可调和的矛盾。他必须做出选择，在无法保证绝对的公平的前提下，是追求道德保全相对的正义还是顺由内心恶欲选择明哲保身？影片并未对徐文杰的内心活动进行深入细致地剖析，而是巧妙地运用开放式的结局将这个问题抛向观影者，引发我们的深刻思考。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;法律与人性的制衡&#34;&gt;法律与人性的制衡&lt;/h2&gt;
&lt;h3 id=&#34;法律和人性的复合体&#34;&gt;法律和人性的复合体&lt;/h3&gt;
&lt;p&gt;徐文杰在人物塑造上以一位典型的中产阶级知识分子的形象呈现，而其本身作为社会中底层和上层阶级之间的过渡性群体的代表，是一个展现出人性的多面特征的复合体。他在法律与人性的交叉地带反复徘徊，从道义上讲，他憎恶昌万年肆意敛财的丑恶嘴脸也愿意以法律的力量将其绳之以法，而在另一个角度上他与昌万年却因为对张磊的死亡而成为了“一条绳上的蚂蚱”。若是事情的真相被暴露，那么根据 1997 年《中华人民共和国刑法》第 310 条的表述：“&lt;strong&gt;明知是犯罪的人而为其提供隐藏处所、财物，帮助其逃匿或者作假证明包庇的，处三年以下有期徒刑、拘役或者管制；情节严重的，处三年以上十年以下有期徒刑。 犯前款罪，事前通谋的，以共同犯罪论处。&lt;/strong&gt;”就影片中的剧情设定而言，徐文杰事先并不知道昌万年的故意伤害行为，因此并不会以共同犯罪定罪，然而其完全符合包庇罪的定罪要求，若是被处以三年以上十年以下的有期徒刑，徐文杰将不得不面对妻离子散等后果，人生也就此跌入深渊。&lt;/p&gt;
&lt;p&gt;然而，纵然徐文杰最终做出隐瞒犯罪事实的决定，但是影片却不希望就此将他打上纯粹恶人的标签。他对于上层阶级也并不只是单纯的顺从攀附关系，在法律与人性的博弈之中，徐文杰没有完全放弃对正义的追逐，他选择留下昌万年犯罪的证据。但是，这样的一种正义并不是法律的绝对权威之下的事实与真相，而是徐文杰作为一个矛盾的复合体自身生发出的“伪正义”，在与人性的恶欲的搏斗中，这种“伪正义”显得如此苍白无力。看起来徐文杰也进行了反抗，然而这种反抗的本质是消极和虚伪的，由于权力的散解，他失去了直面上层阶级的资本，或者说，当徐文杰卸下西装革履的装扮身披囚衣在审讯室接受问讯时，他的律师身份便荡然无存，而所谓的“伪正义”之于事实权威不过只如向大海抛去一块小石子，无法激起一层浪花。&lt;/p&gt;
&lt;h3 id=&#34;人性与法律的冲突&#34;&gt;人性与法律的冲突&lt;/h3&gt;
&lt;p&gt;在阶级社会中，由于人的社会属性具有内在冲突，其在宏观上便表现为阶级利益的冲突，这种冲突直接的促进了公共权力与权威的存在价值，同时也进一步的展现出国家权力与法律的必要性。《暴裂无声》所表现出的社会伦理便是我们现实社会伦理生活的一个缩影，影片中乡村社会的失序也表征出现代社会亟需改进的方面。人们在社会中相互依存，互为生存的条件，而由于天然的在社会分工方面的差异性，社会矛盾也随之产生，人的本质意识与法律之间也进而产生矛盾冲突。由于“&lt;strong&gt;人的需要决定着人的利益，人的利益影响着人的意志，法无论在任何意义上都是人的意志的反映&lt;/strong&gt;”，因而人性与法律在冲突的背后有着无法割裂的紧密关联，法律的制定及相关的机制实质上是为了协调并规范社会关系之间的调和。特殊地，针对于影片中的主要人物而言，人性与法律之间的冲突性都有所表现：张保民一方面知晓自己解救了徐文杰女儿但同时他又怀疑徐文杰与自己儿子的失踪有着密不可分的联系，因此他陷入了人性与法律的矛盾之中，是顺由人性利用媛媛来报复徐文杰还是依据法律规制将解救的孩子交给相关部门呢？也不止有张保民在纠结，昌万年同样如此，出于人性深处的自私与懦弱，他半威胁的向徐文杰说道：“你还有女儿要照顾，我相信你会有办法的。”在人性和法律的碰撞之下，昌万年倒是毅然选择与法律背道而驰。&lt;/p&gt;
&lt;h3 id=&#34;兼谈性恶论法律观&#34;&gt;兼谈“性恶论”法律观&lt;/h3&gt;
&lt;p&gt;《暴裂无声》对社会上层的失态、中层的失德、底层的生存困境进行了深入的剖析，将在人性与社会之殇面前法律的无力感刻画得淋漓尽致，人性的阴暗面展露无遗。这种表现出的“性恶论”与法律之间的关联是影片希望去重点探讨的，而在前述的关键情节中，徐文杰和昌万年是“性恶”者在现代社会中的极具典范性的代表，他们避重就轻，在法律权威面前毅然，这也反映出了此时法律对社会规制的失效。而这种失序情形的产生正是我们需要极为重视的，在影片中，乡村图景的个体秩序因“性恶”的逐步蔓延不再以独立存在，而进一步地则对整个社会产生影响。很显然的，对于在“性恶论”之下催生的以暴制暴的社会法律制度是无法适用于当下的，因此，我们要辩证看待人性与法律之间的关联， 法律的核心问题是离不开对人性的探讨的，规制人性正是法律的职责所在，但与此同时，需要注意法律的运行是不能脱离于人的本性而以独立的形式存在的，完全违反人性的法律，是不可能达到治国经世的目的的。于是，在现代法治的研究中，要做到的是对“性恶论”进行更加透彻分析，通俗而言，便是尽量缩小人性与法律之间的交叉地带。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;《暴裂无声》作为一部优秀的国产悬疑片，以复调形式进行多角度叙事，多视点回溯详略有当，借助隐喻、象征等手法带给观影者和社会以深刻的反思。与此同时，影片在人性和法律问题上进行了重点探讨，人性与法律之间的相互制衡的关系对我们现代法治有着重要的参考价值与意义。在“性恶论”的观点下，影片的开放式结局更是意味深远，法律的正义在失序的社会中不过一纸空文，这为我们进一步审视现实社会的法律与法治敲响了警钟。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《中华人民共和国刑法》，1997年版，第310条。&lt;/li&gt;
&lt;li&gt;米歇尔·福柯：《规训与惩罚》，刘北成译，生活·读书·新知三联书店2003年版，第68页。&lt;/li&gt;
&lt;li&gt;姜登峰：《法律起源的人性分析——以人性冲突为视角》，载《政法论坛》，2012年第2期，第173-181页。&lt;/li&gt;
&lt;li&gt;卓泽渊：《法的价值论》，法律出版社2006年版，第109页。&lt;/li&gt;
&lt;li&gt;姜登峰：《荀子人性法律思想新论》，中国政法大学，2007年，第3页。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>《影视鉴赏》：微影评写作 Film Reviews</title>
        <link>https://blog.pkulkw.me/p/filmreviews/</link>
        <pubDate>Sun, 08 Aug 2021 09:00:00 +0800</pubDate>
        
        <guid>https://blog.pkulkw.me/p/filmreviews/</guid>
        <description>&lt;img src="https://blog.pkulkw.me/p/filmreviews/cover.jpg" alt="Featured image of post 《影视鉴赏》：微影评写作 Film Reviews" /&gt;&lt;blockquote&gt;
&lt;p&gt;2020 ~ 2021 学年北京大学《影视鉴赏》课程微影评写作合集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;暴裂无声-wrath-of-silence-2017httpsmoviedoubancomsubject26647117&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/26647117/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;暴裂无声 Wrath of Silence (2017)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果只能用一个词概括《暴裂无声》，我会选择“压抑”这个词。故事发生的背景选定在荒蛮的矿区，贯穿整部电影的山林、黄沙、原野无不烘托出紧张压抑的氛围。忻钰坤导演延续前作《心迷宫》的悬疑基调，以哑巴矿工张保民寻子为主线展开，同时也将徐文杰与昌万年二人的形象展现的淋漓尽致。&lt;/p&gt;
&lt;p&gt;一般的悬疑犯罪电影中往往充斥着大量的对白，对案情逐层剖析，而这部电影则另辟蹊径，主人公张保民自始至终未曾开口说话，更多的是借助电影语言与镜头语言来展现其满腔的怒火与不甘，推动故事情节的进一步发展。&lt;/p&gt;
&lt;p&gt;张保民实质上是社会中底层人物的一个写照，其“无声”也正暗示着底层人民在社会中缺失话语权的现实；相对应的，徐文杰与昌万年则分别代表着中层与上层人士。随着影片情节的发展，人物形象的逐渐丰满，不难看出导演实际上实际上希望借助电影的力量，来对“&lt;strong&gt;上层失善、中层失德、底层失语&lt;/strong&gt;”这样的社会症结进行鞭挞，引发观影者的反思。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;热情似火-some-like-it-hot-1959httpsmoviedoubancomsubject1292574&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1292574/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;热情似火 Some Like It Hot (1959)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;电影讲述两位乐手为了躲避黑帮的追杀而不得不男扮女装逃亡到一个女子爵士乐团的故事。从某种意义上说，这部电影可以视为好莱坞在当时逐渐成熟的工业环境下的一部极具代表性的作品，它巧妙的融合了黑帮、异装、性别转换等元素，凭借演员精湛的表演、优秀的场面调度、幽默精巧的台词被 AFI 评为百年百部喜剧佳片之首。&lt;/p&gt;
&lt;p&gt;在大众普遍恐同的 50 年代末，这部电影的出现可以说是“&lt;strong&gt;带着镣铐的舞蹈&lt;/strong&gt;”，从性别认同的角度出发，引入大量的 Queer 元素作为喜剧性得以展现的不竭源泉。性别置换的剧情设定看似荒唐无稽，实际上极具先锋性与叛逆性，也确实如此，在五十年后的今天，它同样毫不过时。&lt;/p&gt;
&lt;p&gt;这部电影通过将演员置于一个不可控制的环境之中，来不断推动情节的戏剧化发展，观众的情绪也被剧情的发展所带动，这也正是其喜剧性得以突出展现的来源之一。除此之外，各类笑点的设定往往与当时社会环境相结合，观众在欣赏电影的同时也被引领着对社会现状进行反思，对社会阶级差异与普世的性别观念产生自己的思考。&lt;/p&gt;
&lt;p&gt;看完这样的一部优秀的喜剧作品，我想说 AFI 对其的评价实在是实至名归！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;安全至下-safety-last-1923httpsmoviedoubancomsubject1303388&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1303388/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安全至下 Safety Last! (1923)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为一位与卓别林齐名的喜剧大师，哈罗德·劳埃德在影片中往往扮演屡败屡战、愈挫愈勇、拿自己的生命作为赌注的小人物。在其代表作《安全至下》中，他被迫徒手攀爬12层高楼惊慌地吊在大钟的指针上的情节已成为影史留名的经典特技场景，这部电影也值得我们认真品析回味。&lt;/p&gt;
&lt;p&gt;陈佩斯曾说过：&lt;strong&gt;喜剧都有一个悲情内核&lt;/strong&gt;。这部影片的悲情内核则是“美国梦”，在 20 年代“黄金时代”里，人们感觉到美国梦仿佛触手可得，主人公也告别小镇的未婚妻，前往大城市打拼追梦，然而人们逐渐认识到所谓的美国梦背后所代表的权力、地位、财富只不过是一场泡沫，小人物只会是上层人士走向成功的牺牲品。&lt;/p&gt;
&lt;p&gt;而作为一部商业片，《安全至下》突出展现了幽默风趣的一面，能给观影者带来欢声笑语。相对应地，讽刺性的表现则含蓄许多，在片尾欢快的音乐中，主人公与未婚妻在高楼顶层拥吻，似乎表现出唯有不顾生命安危方能最终实现美国梦的主题。然而，片中小人物的“成功”只是现实中一位接一位小人物的牺牲的凄凉写照，影片对当年“美国梦”的影响其背后的泡沫的描绘比其滑稽情节更值得我们反思。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生活多美好-its-a-wonderful-life-1946httpsmoviedoubancomsubject1293749&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1293749/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;生活多美好 It&amp;rsquo;s a Wonderful Life (1946)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为一部治愈而温馨的励志片，《生活多美好》是那种可以为处于低谷中的人们带来无尽的感动与振奋的一剂良药。电影以回忆的方式来展开剧情，讲述的是在平安夜里主人公乔治·贝利因濒临破产而意图自杀，最终被天使所拯救的故事。&lt;/p&gt;
&lt;p&gt;这部电影所呈现出的是一个极具理想主义色彩的故事，在天使的帮助下，贝利看到了世界没有他的模样，从亲友的生活处境中贝利意识到了自己的存在的重要性，也感受到了“It&amp;rsquo;s a Wonderful Life”。这样的一个结局在温暖励志的同时而又出人意料，由此生发出强烈的戏剧张力。&lt;/p&gt;
&lt;p&gt;平凡生活着的我们，往往看似毫不起眼，没有能撼动世界的地位、财富，也因为各种限制而迫不得已地放弃我们愿倾其所有去追随的梦想。然而，贝利的经历告诉着我们 Everyone Matters，&lt;strong&gt;每个人都是独一无二的珍贵的存在，永远心怀善意，认真的去爱他人、爱自己&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;将军号-the-general-1926httpsmoviedoubancomsubject1292778&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1292778/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;将军号 The General (1926)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;《将军号》是基顿最杰出的佳作之一，这部影片取材于南北战争中发生的真实事件，讲述了男主人公 Johnnie 识破北军试图劫走“将军号”、对南军进行突袭的诡计，独自深入敌营，沿途中智斗敌军，最终获得军官头衔的故事。&lt;/p&gt;
&lt;p&gt;影片的情节设计十分严谨，前半段中主人公深入敌营的过程与后半段其从敌营逃出的经历在结构上呈现出一种巧妙的平衡与对称。在保证影片结构严密的同时，基顿借助自己别具一格的肢体动作表演与充满现实主义的拍摄风格，使得《将军号》&lt;strong&gt;在保有一定的社会批判力度的同时更符合大众的银幕美学&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;惊险的追逐戏与恋人间的温情是基顿的作品中的重要元素，在《将军号》中，可以看到《警察》中陷入围捕机智逃脱的基顿，也可以看到《一周》里与妻子温馨相处的基顿。它具有着超越时代的独特魅力，直到百年后的今天，我们同样会为基顿的精彩创意而会心一笑。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;有话好好说-keep-cool-1997httpsmoviedoubancomsubject1296436&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1296436/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;有话好好说 Keep Cool (1997)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;《有话好好说》围绕着一个有关“沟通”的故事展开，从最初时一件小小的社会矛盾出发，经过一步步的激化，最终一发不可收拾。&lt;/p&gt;
&lt;p&gt;影片采用了手持拍摄，摇晃的镜头带给了观众更强的代入感，能更好的表现出主角心境的变化历程，同时也为影片增添了不少荒诞感与黑色幽默。《有话好好说》并未刻意追求所谓的文艺与高雅，而是另辟蹊径，借助接地气的人物形象与台词设计，生动的还原了世纪交替之际日新月异的城市面貌与日趋浮躁的大众生活。&lt;/p&gt;
&lt;p&gt;荒诞源于现实，影片中所展现的荒诞色彩，说到底是为了突出现实社会中的问题而服务。人物性格的转变看似突然而不讲道理，实质上来自于群体间情绪的交互感染，&lt;strong&gt;不论是人还是社会，在躁动与不安的裹挟之下，走向失控都难以避免&lt;/strong&gt;。荒诞的外壳中是人性与社会的内蕴，在为出彩的喜剧段落而喝彩的同时，其反映的社会问题更值得我们深思。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;阳光普照-a-sun-2019httpsmoviedoubancomsubject30292777&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/30292777/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阳光普照 A Sun (2019)&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“沒有水缸，沒有暗處，只有陽光，24小時從不間斷，明亮溫暖，陽光普照。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《阳光普照》叙述了一个发生在平凡的家庭中的犯罪故事，它以诗意而写实的摄影将阿文一家历经创伤挣扎生活的过程展现得淋漓尽致。而故事的铺展娓娓道来，显得平静从容，通过沿生死、家庭伦理等话题展开的讨论，又展现出浓厚的现实主义色彩，让观影者深刻感受到影片“&lt;strong&gt;平静之下暗流涌动&lt;/strong&gt;”的丰富内蕴。&lt;/p&gt;
&lt;p&gt;从某种意义上来讲，片名中的“阳光”即是现代社会对父权的隐喻。阿豪从来都是“别人家的孩子”，在家庭的无微不至的关怀之下成长生活，他需要去满足社会家庭的畸形期望，将自己的阳光一面完全展现，而在这种极端的压迫之下，他无法藏身。来自家庭的压抑始终笼罩心头，正因如此，阿豪做出从高楼跳下的选择即是他对父权的最终反抗。&lt;/p&gt;
&lt;p&gt;生活的创伤固然令已失序的家庭关系濒临破裂，然而家庭成员之间互相帮扶，同样将东方家庭所沿承的温情治愈展现得淋漓尽致。影片将家庭关系的理想性加以现实化处理呈现给观众，对社会现状层层剖析，意蕴深刻。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;美丽心灵-a-beautiful-mind-2001httpsmoviedoubancomsubject1306029&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/1306029/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;美丽心灵 A Beautiful Mind (2001)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在人物传记片的领域里，《美丽心灵》是最令我震撼的一部佳作。伟大的数学家纳什的一生跌宕起伏，他有着过人的聪颖天资，但同样在生活中历经磨难。正所谓&lt;strong&gt;天才与疯子之间只有一线之隔&lt;/strong&gt;，影片所表现的纳什在两者的边缘反复游走，天才的头脑与脆弱敏感的心智似乎水火不容，但在爱人的鼓励与陪伴中，他坚持了下来，也将了不起科学研究留给了世人。&lt;/p&gt;
&lt;p&gt;在我看来，人物传记片的极致便是给予观影者完全沉浸到主角的人生历程之中的体验，而《美丽心灵》则很好的做到了这一点，它将纳什不为大众所知的一面展现了出来，而我们则是纳什富有传奇色彩的一生的亲历者。精神分裂给纳什的生活带来了困扰，帮助纳什努力克服疾病的是人类最纯粹的情感——爱，纳什与爱人之间互相牺牲，彼此成就，真正演绎出了“A Beautiful Mind”。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;午夜巴黎-midnight-in-paris-2011httpsmoviedoubancomsubject4319218&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/4319218/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;午夜巴黎 Midnight in Paris (2011)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;生命的局限与时间长河的浩渺带给我们的对黄金时代的探索与思考从未消逝，纵然心之所向的黄金时代或许并没有那般美好无缺，但它仍在每个人的回忆之中熠熠生辉。以穿越时空为题材的影片数不胜数，《午夜巴黎》却能做到不落俗套，雨中巴黎如梦如幻的浪漫景致引人沉醉，文艺大师相继“复活”的精彩演绎更是极富创意。&lt;/p&gt;
&lt;p&gt;狄更斯在《双城记》中写下：“&lt;strong&gt;这是最好的时代，也是最坏的时代&lt;/strong&gt;”，我们期望逃避乏味的现实，追寻心中的黄金时代，实质上是将自己的精神世界寄托于桃花源，不过只是聊以慰藉罢了。但是影片告诉我们，每个时代都有自己的辉煌和哀歌，不可能事事尽如人意，放下恋旧的心态，自己的人生又何尝不是他人羡慕的呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;被解救的姜戈-django-unchained-2012httpsmoviedoubancomsubject6307447&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://movie.douban.com/subject/6307447/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;被解救的姜戈 Django Unchained (2012)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;纵观昆汀导演的作品，《被解救的姜戈》是一部十分纯粹的西部片，影片借助诗意化的血腥镜头将昆汀的独特的暴力美学展现的淋漓尽致，是对美国黑奴历史的真实写照，可谓是相当“&lt;strong&gt;政治正确&lt;/strong&gt;”的一部影片。&lt;/p&gt;
&lt;p&gt;暴力与野性的审美终归不是血腥场面的简单堆积，而是对暴力镜头加以诗意化的处理，弱化杀戮的残酷性，进而达到浪漫主义的表达效果。除此之外，主题的沉重并未带来过于压抑的观感，黑色幽默元素的巧妙嵌入使得影片更为诙谐。影片在展现人性与思想的解放之中得以升华，是追求自由的人本主义的呐喊。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>算法学习笔记：摊还分析 Amortized Analysis</title>
        <link>https://blog.pkulkw.me/p/amortized-analysis/</link>
        <pubDate>Fri, 07 May 2021 09:00:00 +0800</pubDate>
        
        <guid>https://blog.pkulkw.me/p/amortized-analysis/</guid>
        <description>&lt;img src="https://blog.pkulkw.me/p/amortized-analysis/cover.jpg" alt="Featured image of post 算法学习笔记：摊还分析 Amortized Analysis" /&gt;&lt;p&gt;摊还分析是一种分析一个操作序列中所执行的所有操作的平均时间分析方法。与一般的平均分析方法不同的是，&lt;strong&gt;它不涉及概率的分析，可以保证最坏情况下每个操作的平均性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面以带有额外 MULTIPOP 操作的栈的实例为例，分别对摊还分析中最常用的三种技术进行介绍。最后定义一种特殊的操作序列，并通过以上三种方法对其摊还代价进行分析。&lt;/p&gt;
&lt;h2 id=&#34;聚合分析-aggregate-analysis&#34;&gt;聚合分析 Aggregate Analysis&lt;/h2&gt;
&lt;h3 id=&#34;概念与定义&#34;&gt;概念与定义&lt;/h3&gt;
&lt;p&gt;证明对所有 $n$，一个 $n$ 个操作的序列最坏情况下花费的总时间为 $T(n)$。因此，在最坏情况下，每个操作的平均代价（或摊还代价）为 $T(n)/n$。&lt;/p&gt;
&lt;p&gt;此摊还代价适用于序列中的每个操作（即使操作类型不同也是如此）。&lt;/p&gt;
&lt;p&gt;考虑栈操作，我们熟知的基本栈操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PUSH(S, x)&lt;/code&gt;：将对象 x 压入栈 S 中，时间 $O(1)$；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POP(S)&lt;/code&gt;：将栈 S 的栈顶对象弹出，并返回该对象，时间 $O(1)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此基础上，增加一个新的栈操作 MULTIPOP，时间 $O(min(s, k))$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;MULTIPOP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;POP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本分析&#34;&gt;基本分析&lt;/h3&gt;
&lt;p&gt;问题：以一个由 n 个 PUSH、POP、MULTIPOP 操作的序列作用于一个空栈 S，总运行时间？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个操作都可能是 MULTIPOP；&lt;/li&gt;
&lt;li&gt;每个 MULTIPOP 的运行时间是 $O(\min(k, s)=O(n)$；&lt;/li&gt;
&lt;li&gt;总的运行时间的上界为 $O(n^2)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这个分析是正确的，但我们通过单独分析每个操作的最坏情况得到的总最坏情况时间 $O(n^2)$ 并不是一个确界。&lt;/p&gt;
&lt;p&gt;考察出现这种情况的原因，我们发现：&lt;strong&gt;这 3 种操作不是平行的，而是互相影响的&lt;/strong&gt;。换言之，只有我们每次通过 PUSH 创造 “机会” 给 POP 和 MULTIPOP，POP 和MULTIPOP 才能 “消费” 这些机会，而不存在无限制的消费。&lt;/p&gt;
&lt;h3 id=&#34;通过聚合分析确定摊还代价&#34;&gt;通过聚合分析确定摊还代价&lt;/h3&gt;
&lt;p&gt;原理：&lt;strong&gt;将一个对象压入栈后，我们至多将其弹出一次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，对一个非空的栈，可以执行的 POP 操作的次数(包括了 MULTIPOP 中调用 POP 的次数)最多与 PUSH 操作的次数相当，即最多 n 次。&lt;/p&gt;
&lt;p&gt;对任意的 n 值，任意一个由 n 个 PUSH、POP 和 MULTIPOP 组成的操作序列，最多花费 $O(n)$ 时间。故一个操作的平均时间为 $O(n)/n=O(1)$。&lt;/p&gt;
&lt;h2 id=&#34;核算法-accounting-method&#34;&gt;核算法 Accounting Method&lt;/h2&gt;
&lt;h3 id=&#34;概念与定义-1&#34;&gt;概念与定义&lt;/h3&gt;
&lt;p&gt;对不同操作赋予不同费用，赋予某些操作的费用可能多于或少于其实际代价。&lt;/p&gt;
&lt;p&gt;我们将赋予一个操作的费用称为它的&lt;strong&gt;摊还代价&lt;/strong&gt;。当一个操作的摊还代价超出其实际代价时，我们将差额存入数据结构中的特定对象，存入的差额称为&lt;strong&gt;信用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意，数据结构中存储的信用永远为&lt;strong&gt;非负值&lt;/strong&gt;。否则对于到此时为止的操作序列，总摊还代价不再是总实际代价的上界。&lt;/p&gt;
&lt;h3 id=&#34;通过核算法确定摊还代价&#34;&gt;通过核算法确定摊还代价&lt;/h3&gt;
&lt;p&gt;$$
\begin{array}{|c|c|c|}
\hline \text { 操作 } &amp;amp; \text { 实际代价 } &amp;amp; \text { 摊还代价 } \\ \hline \text { PUSH } &amp;amp; \mathbf{1} &amp;amp; \mathbf{2} \\ \hline \text { POP } &amp;amp; \mathbf{1} &amp;amp; \mathbf{0} \\ \hline \text { MULTIPOP } &amp;amp; \min (\boldsymbol{k}, \boldsymbol{s}) &amp;amp; \mathbf{0} \\ \hline
\end{array}
$$&lt;/p&gt;
&lt;p&gt;对 PUSH 操作赋予代价 2 元：&lt;strong&gt;1 元支付压栈操作的实际代价，剩余的 1 元存为信用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当执行一个 POP/MULTIPOP 操作时，不再多缴纳费用，而是从存储的信用取出 1 元/k 元来支付其实际代价。&lt;/p&gt;
&lt;h2 id=&#34;势能法-potential-method&#34;&gt;势能法 Potential Method&lt;/h2&gt;
&lt;h3 id=&#34;概念与定义-2&#34;&gt;概念与定义&lt;/h3&gt;
&lt;p&gt;并不将预付代价表示为数据结构中特定对象的信用，而是表示为 “势能”，或简称 “势”，&lt;strong&gt;将势能释放即可用来支付未来操作的代价&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不需要管关心存储多少信用，而是只需要证明，每个操作积累的势能是常数的，别的操作只是消费势能就好了。&lt;/p&gt;
&lt;p&gt;势能法工作方式如下。我们将对一个初始数据结构 $D_{0}$ 执行 $n$ 个操作。对每个 $i=1,2, \cdots,n$，令 $c_{i}$ 为第 i 个操作的实际代价，令 $D_{i}$ 为在数据结构 $D_{i-1}$ 上执行第 i 个操作得到的结果数据结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;势函数&lt;/strong&gt; $\Phi$ 将每个数据结构 $D_{i}$ 映射到一个实数 $\Phi\left(D_{i}\right)$，此值即为关联到数据结构 $D_{i}$ 的势。&lt;/p&gt;
&lt;p&gt;第 i 个操作的&lt;strong&gt;摊还代价&lt;/strong&gt; $\hat{c}_{i}$ 用势函数 $\Phi$ 定义为：&lt;/p&gt;
&lt;p&gt;$$ \hat c_{i}=c_{i}+\Phi(D_{i})- \Phi(D_{i-1}) $$&lt;/p&gt;
&lt;p&gt;因此，每个操作的摊还代价等于其实际代价加上此操作引起的势能变化。则 n 个操作的总摊还代价为&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\sum_{i=1}^{n} \widehat{c}_{i} &amp;amp;=\sum_{i=1}^{n}\left(c_{i}+\Phi\left(D_{i}\right)-\Phi\left(D_{i-1}\right)\right) \\ &amp;amp;=\sum_{i=1}^{n} c_{i}+\Phi\left(D_{n}\right)-\Phi\left(D_{0}\right)
\end{aligned}
$$&lt;/p&gt;
&lt;h3 id=&#34;通过势能法确定摊还代价&#34;&gt;通过势能法确定摊还代价&lt;/h3&gt;
&lt;p&gt;将一个栈的势函数定义为其中的对象数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对初始空栈 $D_0$，令 $\Phi(D_0)＝0$&lt;/li&gt;
&lt;li&gt;由于栈中对象数目非负，则有 $\Phi(D_i) \geqslant 0 = \Phi(D_0)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此用 $\Phi$ 定义的 n 个操作的&lt;strong&gt;总摊还代价即为实际代价的一个上界&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面计算不同栈操作的摊还代价。如果第 i 个操作是 PUSH 操作，此时栈中包含 s 个对象，则势差为&lt;/p&gt;
&lt;p&gt;$$
\Phi\left(D_{i}\right)-\Phi\left(D_{i-1}\right)=(s+1)-s=1
$$&lt;/p&gt;
&lt;p&gt;则由题意，PUSH 操作的摊还代价为&lt;/p&gt;
&lt;p&gt;$$
\hat c_{i}=c_{i}+\Phi\left(D_{i}\right)-\Phi\left(D_{i-1}\right)=1+1=2
$$&lt;/p&gt;
&lt;p&gt;假设第 i 个操作是 &lt;code&gt;MULTIPOP(S, k)&lt;/code&gt;，将 $k^{\prime}=\min (k, s)$ 个对象弹出栈。对象的实际代价为 $k^{\prime}$，势差为&lt;/p&gt;
&lt;p&gt;$$
\Phi\left(D_{i}\right)-\Phi\left(D_{i-1}\right)=-k^{\prime}
$$&lt;/p&gt;
&lt;p&gt;因此，MULTIPOP 的摊还代价为&lt;/p&gt;
&lt;p&gt;$$
\hat c_{i}=c_{i}+\Phi\left(D_{i}\right)-\Phi\left(D_{i-1}\right)=k^{\prime}-k^{\prime}=0
$$&lt;/p&gt;
&lt;p&gt;类似地，普通 $\mathrm{POP}$ 操作的推还代价也为 0。每个操作的摊还代价都是 $O(1)$，因此，n 个操作的总摊还代价为 $O(n)$。由于我们已经论证了 $\Phi\left(D_{i}\right) \geqslant \Phi\left(D_{0}\right)$，因此 n 个操作的总推还代价为总实际代价的上界，所以 n 个操作的最坏情况时间为 $O(n)$。&lt;/p&gt;
&lt;h2 id=&#34;实例分析&#34;&gt;实例分析&lt;/h2&gt;
&lt;p&gt;假定我们对一个数据结构执行一个由 n 个操作组成的序列，当 i 严格为 2 的幂时，第 i 个操作的代价为 i，否则代价为 1。&lt;/p&gt;
&lt;h3 id=&#34;exercise-1-clrs-171-3&#34;&gt;Exercise 1 (CLRS 17.1-3)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;strong&gt;聚合分析&lt;/strong&gt;确定每个操作的摊还代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Let $n$ be arbitrary, and have the cost of operation $i$ be $c(i)$. Then we have,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\sum_{i = 1}^n c(i) &amp;amp; = \sum_{i = 1}^{\left\lceil\lg n\right\rceil} 2^i + \sum_{i \leqslant n \text{ is not a power of } 2} 1 \\ &amp;amp; \leqslant \sum_{i = 1}^{\left\lceil\lg n\right\rceil} 2^i + n \\ &amp;amp; = 2^{1 + \left\lceil\lg n\right\rceil} - 1 + n \\ &amp;amp; \leqslant 2n - 1 + n \\ &amp;amp; \leqslant 3n \in O(n).
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;To find the average, we divide by $n$, and the amortized cost per operation is $O(1)$.&lt;/p&gt;
&lt;h3 id=&#34;exercise-2-clrs-172-2&#34;&gt;Exercise 2 (CLRS 17.2-2)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;strong&gt;核算法&lt;/strong&gt;确定每个操作的摊还代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Let $c_i =$ cost of $i\th$ operation.&lt;/p&gt;
&lt;p&gt;$$ c_i = \begin{cases} i &amp;amp; \text{if $i$ is an exact power of $2$}, \\ 1 &amp;amp; \text{otherwise}. \end{cases} $$&lt;/p&gt;
&lt;p&gt;Charge $3$ (amortized cost $\hat c_i$) for each operation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If $i$ is not an exact power of 2, pay $1$, and store $2$ as credit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If $i$ is an exact power of 2, pay $i$, using stored credit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{array}{cccc} \text{Operation} &amp;amp; \text{Cost} &amp;amp; \text{Actual cost} &amp;amp; \text{Credit remaining} \\ \hline 1 &amp;amp; 3 &amp;amp; 1 &amp;amp; 2 \\ 2 &amp;amp; 3 &amp;amp; 2 &amp;amp; 3 \\ 3 &amp;amp; 3 &amp;amp; 1 &amp;amp; 5 \\ 4 &amp;amp; 3 &amp;amp; 4 &amp;amp; 4 \\ 5 &amp;amp; 3 &amp;amp; 1 &amp;amp; 6 \\ 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 8 \\ 7 &amp;amp; 3 &amp;amp; 1 &amp;amp; 10 \\ 8 &amp;amp; 3 &amp;amp; 8 &amp;amp; 5 \\ 9 &amp;amp; 3 &amp;amp; 1 &amp;amp; 7 \\ 10 &amp;amp; 3 &amp;amp; 1 &amp;amp; 9 \\ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots \end{array}
$$&lt;/p&gt;
&lt;p&gt;Since the amortized cost is $3$ per operation, $\sum\limits_{i = 1}^n \hat c_i = 3n$.&lt;/p&gt;
&lt;p&gt;We know from Exercise 1 that $\sum\limits_{i = 1}^n \hat c_i &amp;lt; 3n$.&lt;/p&gt;
&lt;p&gt;Then we have&lt;/p&gt;
&lt;p&gt;$$\sum_{i = 1}^n \hat c_i \geqslant \sum_{i = 1}^n c_i \Rightarrow \text{credit} = \text{amortized cost} - \text{actual cost} \geqslant 0.$$&lt;/p&gt;
&lt;p&gt;Since the amortized cost of each operation is $O(1)$, and the amount of credit never goes negative, the total cost of $n$ operations is $O(n)$.&lt;/p&gt;
&lt;h3 id=&#34;exercise-3-clrs-173-2&#34;&gt;Exercise 3 (CLRS 17.3-2)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;strong&gt;势能法&lt;/strong&gt;确定每个操作的摊还代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Define the potential function $\Phi(D_0) = 0$, and $\Phi(D_i) = 2i - 2^{1 + \lfloor \lg i \rfloor}$ for $i &amp;gt; 0$. For operation 1,&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\hat c_i &amp;amp;= c_i + \Phi(D_i) - \Phi(D_{i - 1}) \\ &amp;amp;= 1 + 2i - 2^{1+ \lfloor \lg i \rfloor} - 0 \\ &amp;amp;= 1.\end{aligned}$$&lt;/p&gt;
&lt;p&gt;For operation $i(i &amp;gt; 1)$, if $i$ is not a power of 2, then&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\hat c_i &amp;amp;= c_i + \Phi(D_i) - \Phi(D_{i - 1}) \\ &amp;amp;= 1 + 2i - 2^{1 + \lfloor \lg 1 \rfloor} - (2(i - 1) - 2^{1 + \lfloor \lg(i - 1) \rfloor})\\ &amp;amp;= 3.
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;If $i = 2^j$ for some $j \in \mathbb N$, then&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\hat c_i &amp;amp;= c_i + \Phi(D_i) - \Phi(D_{i - 1}) \\ &amp;amp; = i + 2i - 2^{1 + j}-(2(i - 1) - 2^{1 + j - 1}) \\ &amp;amp;= i + 2i - 2i - 2i + 2 + i \\ &amp;amp;= 2.
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Thus, the amortized cost is 3 per operation.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>论文笔记：Mathematical Analysis of Algorithms</title>
        <link>https://blog.pkulkw.me/p/knuth-paper/</link>
        <pubDate>Thu, 18 Mar 2021 09:00:00 +0800</pubDate>
        
        <guid>https://blog.pkulkw.me/p/knuth-paper/</guid>
        <description>&lt;img src="https://blog.pkulkw.me/p/knuth-paper/cover.jpg" alt="Featured image of post 论文笔记：Mathematical Analysis of Algorithms" /&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Mathematical Analysis of Algorithms&amp;rdquo; 由著名的计算机科学家 Donald Knuth 于 1971 年发表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章主要引入两个具体的算法问题来展现算法效率分析的典型方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rearranging data without using auxiliary memory space&lt;/strong&gt;. 不使用额外的存储空间的排序算法（原地排序）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finding the element of rank $t$ when $n$ elements are ranked by some linear ordering relation&lt;/strong&gt;. 在线性有序表中查找特定值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;算法分析领域的核心目标是研究如何量化分析各个不同算法的好坏，主要的两类问题如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Analysis of a particular algorithm&lt;/strong&gt;. 分析某些特定算法的基本特征。
&lt;ul&gt;
&lt;li&gt;Frequency analysis. 分析算法的各部分的执行次数情况，实际上是分析时间复杂度。&lt;/li&gt;
&lt;li&gt;Storage analysis. 分析算法占用的内存资源情况，实际上是分析空间复杂度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analysis of a class of algorithms&lt;/strong&gt;. 分析解决一类问题的所有算法，尝试找到最优的算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，本文指出第 2 类问题的两点弊端：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对技术性调整敏感&lt;/strong&gt;。某些微小改变可能对最优算法的选取产生巨大的影响，因此研究往往被局限在一个有限范围内；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;难以控制模型的拟合性&lt;/strong&gt;。第 2 类问题的分析往往过于复杂，而简化模型可能与现实相悖，导致算法分析出现失误。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正因此，尽管第 1 类问题没有第 2 类问题有趣，但在实际应用中也可以发挥出巨大作用。在接下来的核心篇幅中，Knuth 便借助两个实例来具体阐述算法分析的基本思路。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;in-situ-permutation&#34;&gt;In Situ Permutation&lt;/h2&gt;
&lt;h3 id=&#34;问题提出&#34;&gt;问题提出&lt;/h3&gt;
&lt;p&gt;给定一个一维数组 $x_1,x_2,\cdots,x_n$，以及一个函数 $p$，使得 $p(1),p(2),\cdots,p(n)$ 是对 $1,2,\cdots,n$ 的一个排列，同时 $x_{p(1)},x_{p(2)},\cdots,x_{p(n)}$ 有序。附加要求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;算法的空间复杂度为 $O(1)$；&lt;/li&gt;
&lt;li&gt;不能修改存储排列 $p(1),p(2),\cdots,p(n)$ 的空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;算法设计&#34;&gt;算法设计&lt;/h3&gt;
&lt;p&gt;由数学知识，我们认识到这样的事实：在任意一个排列 $p(1),p(2),\cdots,p(n)$，我们总会存在若干个“&lt;strong&gt;环&lt;/strong&gt;”，这个环形如 $p(i_1)=i_2,p(i_2)=i_3,…,p(i_k)=i_1$。&lt;/p&gt;
&lt;p&gt;以如下排列 $p$ 为例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p(i)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以发现这个排列中有四个“环”：&lt;/p&gt;
&lt;p&gt;$$
\begin{cases}
\begin{aligned}
p(1)&amp;amp;=8, p(8)=4, p(4)=1 \\ p(2)&amp;amp;=2 \\ p(3)&amp;amp;=7, p(7)=3 \\ p(5)&amp;amp;=6, p(6)=9, p(9)=5
\end{aligned}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;我们定义某一环中最小的值为这个环的头元素，那么每当我们发现了一个环的头元素 $k$，我们便将 $x_{p(k)}$ 的值填入 $x_k$ 处，将 $x_{p(p(k))}$ 的值填入 $x_{p(k)}$ 处&amp;hellip;&amp;hellip;最终将 $x_k$ 填入环的尾元素对应的位置即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# 从 p(j) 开始遍历这个环&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# 如果 j 不是环的头元素，那么就会存在一个环上点 k &amp;lt; j&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# --&amp;gt; a&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# --&amp;gt; b&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;# k 是环的头元素&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;算法分析&#34;&gt;算法分析&lt;/h3&gt;
&lt;p&gt;由&lt;strong&gt;基尔霍夫定律&lt;/strong&gt;，我们了解到所有进入某节点的电流的总和等于所有离开这节点的电流的总和，在这里，我们可以有效的衡量某部分程序的执行情况。具体地，判断 &lt;code&gt;k &amp;gt; j&lt;/code&gt; 的总次数等于 &lt;code&gt;k = p(j)&lt;/code&gt; 以及 &lt;code&gt;k = p(k)&lt;/code&gt; 的执行次数之和。&lt;/p&gt;
&lt;p&gt;为了便于分析，在伪代码注释中标记出两个部分 a 和 b。而对于算法的正确性分析，算法的设计过程已清晰的展现，而要给出一个严谨的证明则十分麻烦，作者在此选择略繁琐的证明部分。&lt;/p&gt;
&lt;h3 id=&#34;极端情况&#34;&gt;极端情况&lt;/h3&gt;
&lt;p&gt;若记当前环的长度为 n，易知当 $(p(1),p(2),\cdots,p(n))=(2,3,&amp;hellip;,n,1)$ 时即对应 a 的最坏情况，此时 $a=(n-1)+(n-2)+\dots+0$ 取到最大值 $\frac{1}{2}(n^2-n)$，值得注意的是，此时正好对应着 b 的最好情况。&lt;/p&gt;
&lt;p&gt;而相类似的，当 $(p(1),p(2),\cdots,p(n))=(1,2,3,&amp;hellip;,n)$ 时即对应 b 的最坏情况，此时正好对应着 a 的最好情况。&lt;/p&gt;
&lt;h3 id=&#34;平均情况&#34;&gt;平均情况&lt;/h3&gt;
&lt;p&gt;考虑 n 个元素的全排列的 $n!$ 种可能情况是等可能的，即对应着平均情况。&lt;/p&gt;
&lt;p&gt;重新回顾此前的例子排列 $p$，可以这个排列的环表述为 $(1,8,4),(2),(3,7),(5,6,9)$，然而若不加限制，对其中每个环的表述方式会存在多种，难以统一，因此给予以下限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个环从其头元素开始；&lt;/li&gt;
&lt;li&gt;每个环的头元素递减排列。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这样的条件下，环的表述可以固定为 $(5,6,9),(3,7),(2),(1,8,4)$。&lt;/p&gt;
&lt;p&gt;而此时我们发现括号的存在已无实际意义，因此可以直接去掉。那么，我们可以将每一个 $(p(1),p(2),\cdots,p(n))$ 的排列映射为符合题意的 $(q(1),q(2),\cdots,q(n))$。&lt;/p&gt;
&lt;p&gt;这时，我们可以对 b 的意义进行描述：$p$ 中的&lt;strong&gt;环的个数&lt;/strong&gt;，也即 $q$ 中的 &lt;strong&gt;&amp;ldquo;left-to-right minima&amp;rdquo;&lt;/strong&gt;（可以被表示为&lt;strong&gt;第一类斯特林数&lt;/strong&gt;），由数学知识，记 b 的平均值为 $H_n$，b 的方差为 $H_n^{(2)}$，则有：&lt;/p&gt;
&lt;p&gt;$$
H_{n}=1+\frac{1}{2}+\cdots+\frac{1}{n} \quad \text { and } \quad H_{n}^{(2)}=1+\frac{1}{4}+\cdots+\frac{1}{n^{2}}
$$&lt;/p&gt;
&lt;p&gt;接下来我们同样可以对 a 的值进行分析。当循环变量 &lt;code&gt;j = q(i)&lt;/code&gt; 时，$k$ 一直往后执行到 $q(i + r)$，满足 $q(i+r)&amp;lt;q(i)$ 抑或 $q(i)$ 为环的头元素，因此会从 $q(i)$ 到 $q(i + r)$ 执行运算，于是，令：&lt;/p&gt;
&lt;p&gt;$$
y_{ij} = \begin{cases} 1, if\ q(i) &amp;lt; q(k)\ for\ i &amp;lt; k \leqslant j \\ 0, \ otherwise \end {cases}
$$&lt;/p&gt;
&lt;p&gt;那么&lt;/p&gt;
&lt;p&gt;$$
a=\sum_{1 \leqslant i&amp;lt;j \leqslant n} y_{i j}
$$&lt;/p&gt;
&lt;p&gt;具体地，在以上实例中，$(q(1),\cdots,q(9))=(5,6,9,3,7,2,1,8,4)$，此时代入公式可得 $(i,j)=(1,2),(1,3),(2,3),(4,5),(7,8),(7,9)$ 时 $y_{ij}=1$，其余情形下 $y_{ij}=0$。&lt;/p&gt;
&lt;p&gt;记 $y_{ij}$ 的平均值为 $\bar{y}_{ij}$，容易发现它便是所有 $n!$ 个排列中 $y_{ij}=1$ 的排列个数，我们有：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\bar{a}=\sum_{1 \leqslant i&amp;lt;j \leqslant n} \bar{y}_{i j} &amp;amp;=\sum_{1 \leqslant i&amp;lt;j \leqslant n} \frac{1}{j-i+1} \\ &amp;amp;=\sum_{2 \leqslant r \leqslant n} \frac{n+1-r}{r}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;记调和级数为 $H_n$，对上式进行展开：&lt;/p&gt;
&lt;p&gt;$$
\bar{a}=(n+1)\left(H_{n}-1\right)-(n-1)=(n+1) H_{n}-2 n
$$&lt;/p&gt;
&lt;p&gt;由数学知识我们容易证明 $H_n=\sum\limits_{i=1}^n\frac{1}{i}=O(\log n)$，因此 a 的平均执行次数为 $O(\log n)$。&lt;/p&gt;
&lt;p&gt;接下来我们对 a 的方差进行求解，我们需要计算下面式子的平均值：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\left(\sum_{1 \leqslant i&amp;lt;j \leqslant n} y_{i j}\right)^{2}=&amp;amp;\sum_{1 \leqslant i&amp;lt;j \leqslant n} y_{i j}^{2}+\sum_{\substack{1 \leqslant i&amp;lt;j \leqslant n \\ 1 \leqslant k&amp;lt;l \leqslant n \\ (i, j) \neq(k, l)}} y_{i j} y_{k l} \\ =&amp;amp;\sum_{1 \leqslant i&amp;lt;j \leqslant n} \bar{y}_{i j} +2 \sum_{1 \leqslant i&amp;lt;j&amp;lt;k&amp;lt;l \leqslant n}\left(y_{i j} y_{k l}+y_{i k} y_{j l}+y_{i l} y_{j k}\right) \\ &amp;amp; +2 \sum_{1 \leqslant i&amp;lt;j&amp;lt;k \leqslant n}\left(y_{i j} y_{j k}+y_{i k} y_{j k}+y_{i j} y_{i k}\right) \\ =&amp;amp; \bar{a}+2(A+B+C+D+E+F)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;接下来便是一系列繁杂的数学运算过程：&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{ll}
B=\left(\begin{array}{l} n \\ 2
\end{array}\right)-2 Z, &amp;amp; C=Y-Z-2\left(\begin{array}{l} n \\ 2
\end{array}\right)+3 X \\ D=E=Z-X, &amp;amp; F=\left(\begin{array}{l} n \\ 2
\end{array}\right)-2 X
\end{array}
$$&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
X &amp;amp;=\sum_{1 \leqslant i&amp;lt;j \leqslant n} \frac{1}{j-i+1} \\ Y &amp;amp;=\sum_{1 \leqslant i&amp;lt;j \leqslant n} H_{j-i} \\ Z &amp;amp;=\sum_{1 \leqslant i&amp;lt;j \leqslant n} \frac{1}{j-i+1} H_{j-i}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;将 $r=j-i+1$ 代入可得：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
X&amp;amp;=(n+1) H_{n}-2 n \\ Y&amp;amp;=\frac{1}{2}\left(n^{2}+n\right) H_{n}-\frac{3}{4} n^{2}-\frac{1}{4} n \\ Z&amp;amp;=\frac{1}{2}(n+1)\left(H_{n}^{2}-H_{n}^{(2)}\right)-n H_{n}+n
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;相对应地，&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
A &amp;amp;=\sum_{1 \leqslant i&amp;lt;j&amp;lt;k&amp;lt;l \leqslant n} \frac{1}{(j-i+1)(l-k+1)} \\ &amp;amp;=\sum_{\substack{r \geqslant 2 \\ s \geqslant 2 \\ r+s \leqslant n}} \frac{1}{r s}\left(\begin{array}{c} n-r-s+2 \\ 2
\end{array}\right)\\ &amp;amp;=\sum_{\substack{2 \leqslant r \leqslant t-2 \\ 4 \leqslant t \leqslant n}} \frac{1}{t}\left(\frac{1}{r}+\frac{1}{t-r}\right)\left(\begin{array}{c} n-t+2 \\ 2
\end{array}\right)\\ &amp;amp;=2 \sum_{\substack{2 \leqslant r \leqslant t-2 \\ 4 \leqslant t \leqslant n}} \frac{1}{r t}\left(\begin{array}{c} n-t+2 \\ 2
\end{array}\right) \\ &amp;amp;=\sum_{\substack{2 \leqslant r \leqslant t-2 \\ 4 \leqslant t \leqslant n}} \frac{1}{r t}\left((n+2)(n+1)-t(2 n+3)+t^{2}\right) \\ &amp;amp;=(n+2)(n+1) U-(2 n+3) V+W
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;令 $r=j-i+1,s=l-k+1,t=r+s$，代入可得：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
U&amp;amp;=\frac{1}{2}\left(H_{n}-1\right)^{2}-\frac{1}{2} H_{n}^{(2)}+\frac{1}{n} \\ V&amp;amp;=(n-1) H_{n-2}-2 n+4 \\ W&amp;amp;=\frac{1}{2}\left(\left(n^{2}+n-2\right)\left(H_{n-2}-1\right)-\frac{1}{2}(n-1)(n-2)+1-3(n-3)\right)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;最终带入整理可以得到：&lt;/p&gt;
&lt;p&gt;$$
\sigma^{2}=2 n^{2}-(n+1)^{2} H_{n}^{(2)}-(n+1) H_{n}+4 n
$$&lt;/p&gt;
&lt;p&gt;对 a 的方差的讨论证明了 $O(n^2)$ 的最坏情况是非常罕见的。最后再进行一些近似，可以得到如下的结论：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
a&amp;amp;=(\min 0, \text { ave } n \ln n+O(n), \max \frac{1}{2}(n^{2}-n),\text{dev} \sqrt{2-\pi^{2} / 6} n+O(\log n)) ; \\ b&amp;amp;=(\min 1, \text { ave } \ln n+O(1), \max n, \text{dev} \sqrt{\ln n}+O(1))
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;我们可以得出结论：&lt;strong&gt;这个算法的平均时间复杂度为 $O(n\log n)$，在极少数情况下可能达到 $O(n^2)$&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;进一步分析&#34;&gt;进一步分析&lt;/h3&gt;
&lt;p&gt;对于外循环遍历到的一个 $j$，同时搜索 $p(j), p^{-1}(j),p(p(j)),p^{-1}(p^{-1}(j)),\cdots$，其中 $p^{-1}$ 为 $p$ 的反函数，则可以对算法进行优化。&lt;/p&gt;
&lt;p&gt;设最坏情况为 $f(n)$，此时整个排列只有一个长度为 n 的环，我们可以得到如下递推式：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
f(1)&amp;amp;=0 \\ f(n)&amp;amp;=\max _{1 \leqslant k&amp;lt;n}(\min (k, n-k)+f(k)+f(n-k))
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;记 $\nu(k)$ 为 $k$ 的二进制表示中 1 的个数。对于这个看起来很难下手的问题，Knuth 给出了答案：&lt;/p&gt;
&lt;p&gt;$$
f(n)=\sum_{0\leqslant k&amp;lt;n}\nu(k)
$$&lt;/p&gt;
&lt;p&gt;若 $a_1&amp;gt;a_2&amp;gt;\cdots&amp;gt;a_r$，则有&lt;/p&gt;
&lt;p&gt;$$
f(2^{a_1}+2^{a_2}+&amp;hellip;+2^{a_r})=\frac{1}{2}(a_12^{a_1}+(a_2+2)2^{a_2}+&amp;hellip;+(a_r+2r-2)2^{a_r})
$$&lt;/p&gt;
&lt;p&gt;经过以上分析，我们了解到这种解法在最坏的情况下的时间复杂度为 $O(n\log n)$，实现了进一步的优化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;selecting-the-t_th-largest&#34;&gt;Selecting the $t_{th}$ largest&lt;/h2&gt;
&lt;h3 id=&#34;问题提出-1&#34;&gt;问题提出&lt;/h3&gt;
&lt;p&gt;给定一个一维数组 $a_1,a_2,\cdots,a_n$，在比较次数尽可能少的前提下找到数组中第 $t$ 大的值。&lt;/p&gt;
&lt;h3 id=&#34;算法设计-1&#34;&gt;算法设计&lt;/h3&gt;
&lt;p&gt;对于这种问题，一个时间复杂度为 $O(n\log n)$ 的排序算法便可以解决，因此，我们需要考虑的是有没有时间复杂度低于 $O(n\log n)$ 的算法。&lt;/p&gt;
&lt;p&gt;回忆我们已了解的算法以及刚学过的分治策略，根据快速排序的启发，我们可以采取如下思路：&lt;/p&gt;
&lt;p&gt;对于数组 $a_i,\cdots,a_j$，首先调用 &lt;code&gt;Partition()&lt;/code&gt; 方法对 $a_i$ 的位置进行移动，记移动后的位置为 k，使它左边元素都比其小、右边元素都比其大。此时我们根据 k 和 t 的大小关系，就可以分别讨论接下来的搜索是在 k 的左侧还是右侧进行，抑或是此时 k 位置的元素正好是第 k 大的元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;FindtthNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# Partition()的实现参考快速排序的相关原理&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# Partition()返回的是分割后的数组下标&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# 减去数组开头的位置得到a[k]是a[i]-a[j]里第几大的数&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Partition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; 
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindtthNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindtthNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;算法分析-1&#34;&gt;算法分析&lt;/h3&gt;
&lt;p&gt;对子问题的限定仅与两个变量有关：数组的长度 n 以及 所要找的数的位次 t，因此我们可以记子问题为 $C_{n,t}$，假设 t 的选取完全随机，那么&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
C_{1,1}&amp;amp;=0 \\ C_{n, t}&amp;amp;=n-1+\frac{1}{n}\left(A_{n, t}+B_{n, t}\right)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;其中 $A_{n, t}$ 对应伪代码中 &lt;code&gt;k &amp;lt; t&lt;/code&gt; 的情形：&lt;/p&gt;
&lt;p&gt;$$
A_{n, t}=C_{n-1, t-1}+C_{n-2, t-2}+\cdots+C_{n-t+1,1}
$$&lt;/p&gt;
&lt;p&gt;同时 $B_{n, t}$ 对应伪代码中 &lt;code&gt;k &amp;gt; t&lt;/code&gt; 的情形：&lt;/p&gt;
&lt;p&gt;$$
B_{n, t}=C_{t, t}+C_{t+1, t}+\cdots+C_{n-1, t}
$$&lt;/p&gt;
&lt;p&gt;经过观察，我们发现&lt;/p&gt;
&lt;p&gt;$$
A_{n+1,t+1} = A_{n,t}+C_{n,t}\\ B_{n+1,t} = B_{n,t}+C_{n,t}
$$&lt;/p&gt;
&lt;p&gt;使用差消迭代法，进行如下操作&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp;(n+1)C_{n+1,t+1}-nC_{n,t+1}-nC_{n,t}+(n-1)C_{n-1,t} \\ =&amp;amp; (n+1)n - n(n-1) - n(n-1) + (n-1)(n-2) \\ &amp;amp;+ A_{n+1,t+1}-A_{n,t+1}-A_{n,t}+A_{n-1,t} \\ &amp;amp;+B_{n+1,t+1}-B_{n,t+1}-B_{n,t}+B_{n-1,t} \\ =&amp;amp; 2 + C_{n,t} - C_{n-1,t}+C_{n,t+1}-C_{n-1,t}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;进而推出&lt;/p&gt;
&lt;p&gt;$$
C_{n+1, t+1}-C_{n, t+1}-C_{n, t}+C_{n-1, t}=\frac{2}{n+1}
$$&lt;/p&gt;
&lt;p&gt;$$
\left(C_{n+1, t+1}-C_{n, t}\right)-\left(C_{n, t+1}-C_{n-1, t}\right)=\frac{2}{n+1}
$$&lt;/p&gt;
&lt;p&gt;由此，&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
C_{n+1, t+1}-C_{n, t} &amp;amp;=\frac{2}{n+1}+\frac{2}{n}+\cdots+\frac{2}{t+2}+C_{t+1, t+1}-C_{t, t} \\ &amp;amp;=2\left(H_{n+1}-H_{t+1}\right)+2-2 /(t+1)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;不断进行迭代可得&lt;/p&gt;
&lt;p&gt;$$
C_{n, t}=2\left((n+1) H_{n}-(n+3-t) H_{n+1-t}-(t+2) H_{t}+n+3\right)
$$&lt;/p&gt;
&lt;p&gt;由于调和级数 $H_n = O(\log n)$，我们可以得出结论：无论 n 和 t 取何值，算法的平均时间复杂度为 $C_{n,t}=O(n)$。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;对以上的两个算法实例进行解释分析只是作者用来解释算法分析的本质的一个途径，作者希望表明自己的以下观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法分析对计算机科学领域十分重要，能够加深我们对计算机科学的理解；&lt;/li&gt;
&lt;li&gt;算法分析与离散数学密切相关，许多技巧不在大学中讲授，但它们却是计算机科学家们的必修课；&lt;/li&gt;
&lt;li&gt;算法分析正在形成科学方法，同时我们可以用一些比较通用的方法解决一系列问题；&lt;/li&gt;
&lt;li&gt;算法分析领域还有很多问题等待着我们去解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：（感谢帮助！）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hehao98.github.io/posts/2018/03/knuth-paper/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“Mathematical Analysis of Algorithms” 阅读心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/erutan_pku/article/details/20291441&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[翻译] Mathematical Analysis of Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>GitHub Pages &#43; Hugo：我的博客搭建之路</title>
        <link>https://blog.pkulkw.me/p/myblog/</link>
        <pubDate>Mon, 08 Feb 2021 09:00:00 +0800</pubDate>
        
        <guid>https://blog.pkulkw.me/p/myblog/</guid>
        <description>&lt;img src="https://blog.pkulkw.me/p/myblog/cover.jpg" alt="Featured image of post GitHub Pages &#43; Hugo：我的博客搭建之路" /&gt;&lt;p&gt;很早就有自己购买域名搭建一个个人博客网站的想法了，而真正开始将这个想法付诸行动是源于 &lt;a class=&#34;link&#34; href=&#34;https://education.github.com/pack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;GitHub Student Developer Pack&lt;/strong&gt;&lt;/a&gt; 的成功申请。&lt;/p&gt;
&lt;h2 id=&#34;申请-github-学生开发包&#34;&gt;申请 GitHub 学生开发包&lt;/h2&gt;
&lt;p&gt;GitHub 学生开发包内包含众多权益，比如 &lt;a class=&#34;link&#34; href=&#34;https://termius.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Termius&lt;/a&gt; 的 Premium 版、&lt;a class=&#34;link&#34; href=&#34;https://github.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; 的 Pro 版会员、&lt;a class=&#34;link&#34; href=&#34;[name.com]%28https://www.name.com%29&#34; &gt;name.com&lt;/a&gt; 以及 &lt;a class=&#34;link&#34; href=&#34;[namecheap.com]%28https://www.namecheap.com%29&#34; &gt;namecheap.com&lt;/a&gt; 提供的免费域名 + SSL 证书、&lt;a class=&#34;link&#34; href=&#34;https://www.digitalocean.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DigitalOcean&lt;/a&gt; 提供的 50 刀代金券。权益实在太多了，大家可以对照官方网址逐一研究。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 236; flex-basis: 566px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/add.png&#34; data-size=&#34;1249x529&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/add.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/add_hu21b9583fa1f8b66537b4cc29153a8565_74106_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/add_hu21b9583fa1f8b66537b4cc29153a8565_74106_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1249&#34;
				height=&#34;529&#34;
				loading=&#34;lazy&#34;
				alt=&#34;GitHub 学生开发包&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;GitHub 学生开发包&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有关 GitHub 学生包具体如何申请，网上相关的教程非常多也相对比较容易，在此简单的写一下申请流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入 &lt;a class=&#34;link&#34; href=&#34;https://education.github.com/pack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub 学生包&lt;/a&gt; 的官方页面；&lt;/li&gt;
&lt;li&gt;点击「Get the Pack」按钮登录你的 GitHub 账号；&lt;/li&gt;
&lt;li&gt;点击「Submit Your Information」提交信息进行申请，具体的填写可以参考下图（如果&lt;strong&gt;使用由学校提供的 edu 邮箱会加快审批速度&lt;/strong&gt;）；&lt;/li&gt;
&lt;li&gt;等待几天后收到邮件就可以享用 GitHub 学生开发包的所有权益。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 55; flex-basis: 133px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_1.jpg&#34; data-size=&#34;514x927&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_1.jpg&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_1_hu1abbaee62f74b5ea9dfceba0f18952d8_57801_480x0_resize_q75_box.jpg 480w, https://blog.pkulkw.me/p/myblog/blog_1_hu1abbaee62f74b5ea9dfceba0f18952d8_57801_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;514&#34;
				height=&#34;927&#34;
				loading=&#34;lazy&#34;
				alt=&#34;GitHub 学生开发包申请示例&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;GitHub 学生开发包申请示例&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;购买-digitalocean-云服务器&#34;&gt;购买 DigitalOcean 云服务器&lt;/h2&gt;
&lt;p&gt;在 GitHub 学生包申请成功后我主要看了一下有关云服务器的权益，主要有 Microsoft Azure 的 100 刀额度、AWS 的 100 刀额度以及 DigitalOcean 的 50 刀额度。由于苦逼的我并没有信用卡，因此我最后选择了只需要绑定 Paypal 的 DigitalOcean。&lt;/p&gt;
&lt;p&gt;然而在这里我却不幸的落入了坑里，最后不得不放弃使用云服务器搭建一个 WordPress 网站的想法。&lt;/p&gt;
&lt;p&gt;这是由于 DigitalOcean 的邀请注册机制，新用户通过他人的邀请链接注册使用便可以获得为期&lt;strong&gt;两个月&lt;/strong&gt;的 100 刀的额度，看起来不错，然而两个月相对于 GitHub 提供的一年额度实在是太短了，最主要的是每一个账户尽可以使用一次优惠同时 Paypal 只能绑定一个账户，这也导致我&lt;strong&gt;在通过他人的邀请链接注册后也是用不了 GitHub 学生包提供的白嫖优惠&lt;/strong&gt;了&amp;hellip;&amp;hellip;因此，诚心告诫像我一样想要使用 DitgitalOcean 作为建站主机的穷学生一定要在浏览器的隐私页面在 &lt;a class=&#34;link&#34; href=&#34;https://www.digitalocean.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;官网&lt;/strong&gt;&lt;/a&gt; 进行注册。&lt;/p&gt;
&lt;p&gt;由于我接下来在 DigitalOcean 只能够正规续费，而经过评估，DigitalOcean 所提供的使用体验以及性价比就不太好了，也因此前几天我正式的 “删库跑路”，注销了 DigitalOcean 账户。&lt;/p&gt;
&lt;h2 id=&#34;购买域名--配置-ssl-证书&#34;&gt;购买域名 + 配置 SSL 证书&lt;/h2&gt;
&lt;p&gt;我最开始是在 &lt;a class=&#34;link&#34; href=&#34;https://www.namecheap.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;namecheap.com&lt;/a&gt; 进行选购域名，该网站可以免费提供 .me 域名一年的使用权以及有效期一年的 SSL certificate。除此之外，&lt;a class=&#34;link&#34; href=&#34;https://www.name.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;name.com&lt;/a&gt; 可以提供免费的 .studio/.ninja 等域名，在 &lt;a class=&#34;link&#34; href=&#34;https://get.tech/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;.TECH Domains&lt;/a&gt; 则可以获取免费的 .tech 域名等等。&lt;/p&gt;
&lt;p&gt;在选择了合适的域名之后我们在网站的后台便可以管理 DNS 记录，申请开通 SSL certificate 以进行网站的下一步搭建了。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 174; flex-basis: 418px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_2.png&#34; data-size=&#34;1448x830&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_2.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_2_hu705160a38f94686797db034772d92a3a_18675_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_2_hu705160a38f94686797db034772d92a3a_18675_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1448&#34;
				height=&#34;830&#34;
				loading=&#34;lazy&#34;
				alt=&#34;namechaeap 网站&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;namechaeap 网站&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;初识-wordpress&#34;&gt;初识 WordPress&lt;/h2&gt;
&lt;p&gt;云服务器创建好之后，便可以搭建 WordPress 开发环境了。由于编译安装需要输入大量的命令，如果是配置生产环境需要耗费大量的时间，同时对 Linux 小白不太友好，因此现在比较流行的是使用 &lt;strong&gt;LNMP/LAMP&lt;/strong&gt; 等一键安装包进行环境搭建。&lt;/p&gt;
&lt;p&gt;LNMP 的全称为 Linux + &lt;strong&gt;Nginx&lt;/strong&gt; + MySql + PHP，LAMP 的全称则为 Linux + &lt;strong&gt;Apache&lt;/strong&gt; + MySql + PHP，由于 Nginx 使用资源少同时支持更多并发连接，对于静态内容比较多的网站支持性不错，因此我选择了 LNMP 作为开发环境，具体的安装文档可以在 &lt;a class=&#34;link&#34; href=&#34;https://lnmp.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LNMP.org&lt;/a&gt; 查阅。&lt;/p&gt;
&lt;p&gt;搭建好数据库设置完毕用户名、密码等基本信息后，我们便可以到网站的后台来管理自己的博客了，首先可以&lt;strong&gt;选择一个好看而简单的博客主题&lt;/strong&gt;，在这里建议一般在官方后台以及 &lt;a class=&#34;link&#34; href=&#34;https://themeforest.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ThemeForest&lt;/a&gt; 等比较正规的主题网站上下载使用而避免第三方主题携带有恶意代码等。&lt;/p&gt;
&lt;p&gt;WordPress 网站的后期管理相对比较简单，许多维护问题在网站后台就可以解决，如果还有遇到的问题话，Google 以及 &lt;a class=&#34;link&#34; href=&#34;https://codex.wordpress.org/zh-cn:Main_Page&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;官方文档&lt;/strong&gt;&lt;/a&gt; 中基本能告诉你答案。&lt;/p&gt;
&lt;h2 id=&#34;告别-wordpress-拥抱-github-pages&#34;&gt;告别 WordPress 拥抱 GitHub Pages&lt;/h2&gt;
&lt;p&gt;由于 DigitalOcean 的垃圾服务以及对 WordPress 的厌倦，我希望能找到一个对 Markdown 支持更好、更能使人专注于创作而不是调整页面的平台，这让我回忆起了几年前创建的 GitHub Pages。&lt;/p&gt;
&lt;p&gt;由于不太需要动态内容，静态网站已经可以完美的满足我的需求，对于我来说，GitHub Pages 便是一个方便的实现方案。&lt;/p&gt;
&lt;p&gt;而既然选择了 GitHub Pages，相应的可以选择 &lt;strong&gt;Hugo、Hexo、jekyll&lt;/strong&gt; 等静态网站生成器加以实现。由于对 Hugo 的一款主题十分钟情，我便毫不犹豫地选择了 Hugo，同时，Hugo 号称是世界上生成网站最快的 framwork 倒也是蛮不错的了。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 243; flex-basis: 584px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_3.png&#34; data-size=&#34;1392x572&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_3.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_3_huaff2b61b5d9574bb5040c7f454cc9030_16664_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_3_huaff2b61b5d9574bb5040c7f454cc9030_16664_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1392&#34;
				height=&#34;572&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Hugo 的官方首页&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Hugo 的官方首页&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 Hugo&lt;/h2&gt;
&lt;p&gt;在 Hugo 的安装中我开始遇到了一些麻烦，与 Mac 和 Linux 相比，Windows 端的 Hugo 安装显得略微繁琐，首先在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo 的 Release 页面&lt;/a&gt; 根据相应的版本以及平台进行下载，64 位的 Windows 电脑即选择下图中某一个即可。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 123; flex-basis: 296px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_4.png&#34; data-size=&#34;576x467&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_4.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_4_hu61decb19c436261dcc3b5881caaa17a6_8738_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_4_hu61decb19c436261dcc3b5881caaa17a6_8738_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;576&#34;
				height=&#34;467&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Hugo 的发行页面&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Hugo 的发行页面&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于部分主题需要 Hugo 的 Extended 版本才可以正常使用，因此建议&lt;strong&gt;一步到位直接安装 Extended 版本&lt;/strong&gt;的 Hugo，在将压缩包解压后一定不要忘记的是将 &lt;code&gt;hugo.exe&lt;/code&gt; 所在的文件夹添加至系统的&lt;strong&gt;环境变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若是以上步骤都正常完成，那么可以在输入 &lt;code&gt;hugo version&lt;/code&gt; 命令后得到正常的版本号显示。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 435; flex-basis: 1046px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_5.png&#34; data-size=&#34;946x217&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_5.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_5_hu94dd87023e4fcbf453a8f901c200ab73_8475_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_5_hu94dd87023e4fcbf453a8f901c200ab73_8475_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;946&#34;
				height=&#34;217&#34;
				loading=&#34;lazy&#34;
				alt=&#34;检查 Hugo 版本&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;检查 Hugo 版本&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来便可以正式的使用 Hugo 来创建你的网站。&lt;/p&gt;
&lt;h2 id=&#34;初始化网站&#34;&gt;初始化网站&lt;/h2&gt;
&lt;p&gt;首先选择好一个合适的存储路径，接下来便可以通过 &lt;code&gt;hugo new site XXX&lt;/code&gt; 的命令来初始化网站。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 274; flex-basis: 659px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_6.png&#34; data-size=&#34;865x315&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_6.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_6_hu0cecf95dde98ec4047b8622de6f43efd_32453_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_6_hu0cecf95dde98ec4047b8622de6f43efd_32453_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;865&#34;
				height=&#34;315&#34;
				loading=&#34;lazy&#34;
				alt=&#34;初始化网站&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;初始化网站&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来便可以配置自己的博客主题了，我选择的是 MemE 主题，主要是看重它的简洁大方，同时字体渲染还蛮好看。主题的官方页面如下：&lt;a class=&#34;link&#34; href=&#34;https://github.com/reuixiy/hugo-theme-meme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/reuixiy/hugo-theme-meme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一步便进行主题的安装：（假设 blog 是你创建的 site 的名称）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; blog
~/blog $ git init
~/blog $ git submodule add --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; https://github.com/reuixiy/hugo-theme-meme.git themes/meme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时，你也可以尝试新建文章的操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~/blog $ hugo new &lt;span class=&#34;s2&#34;&gt;&amp;#34;posts/hello-world.md&amp;#34;&lt;/span&gt;
~/blog $ hugo new &lt;span class=&#34;s2&#34;&gt;&amp;#34;about/_index.md&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hugo 提供了一种非常便捷的预览方式，输入命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~/blog $ hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;便可以在浏览器键入 &lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:1313/&lt;/a&gt; 而实现网站的实时预览。&lt;/p&gt;
&lt;h2 id=&#34;自定义主题&#34;&gt;自定义主题&lt;/h2&gt;
&lt;p&gt;Hugo 可以提供非常强大的主题自定义的能力，根据主题所提供的配置文件，我们可以不断丰富自己的网站的功能，也可以根据自己的喜好增添许多 CSS 样式来进行美化。&lt;/p&gt;
&lt;p&gt;以我所使用的主题 MemE 为例，可以选择开启 &lt;strong&gt;KaTeX、MathJax、Mermaid&lt;/strong&gt; 等许多功能，同时对网站的几乎所有部分都可以更改或添加自定义元素：&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 79; flex-basis: 189px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_8.png&#34; data-size=&#34;710x897&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_8.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_8_hufd1662ecf804412a340eb0c909cb9183_31015_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_8_hufd1662ecf804412a340eb0c909cb9183_31015_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;710&#34;
				height=&#34;897&#34;
				loading=&#34;lazy&#34;
				alt=&#34;MemE 主题配置节选&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;MemE 主题配置节选&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用-github-pages-托管网站&#34;&gt;使用 Github Pages 托管网站&lt;/h2&gt;
&lt;p&gt;随后便可以在 GitHub 上建立 Repo 来托管自己的网站代码了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 config.toml 中的 baseURL 更改为你自己的自定义域名。&lt;/li&gt;
&lt;li&gt;在 GitHub 中创建一个名称为 username.github.io 的仓库（username 替换为你自己的用户名），同时其余选项均不勾选。&lt;/li&gt;
&lt;li&gt;在你的 Hugo 网站目录下键入命令 &lt;code&gt;hugo -v&lt;/code&gt; 生成网站的相应文件，存储在 &lt;code&gt;public&lt;/code&gt; 目录下。&lt;/li&gt;
&lt;li&gt;进入 &lt;code&gt;public&lt;/code&gt; 目录下，并按照正常的 git 命令操作：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
$ git init
$ git remote add origin https://github.com/XXXX/XXXX.github.io.git
$ git add -A
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;如果 git 操作正常没有报错，那么这时你便可以在你的 GitHub 仓库中看到相应的文件了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你需要使用自己的自定义域名来使你的 GiHub Pages 更为精致，那么你需要先到域名管理后台添加一条 CNAME 记录：&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 1042; flex-basis: 2502px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_9.png&#34; data-size=&#34;1658x159&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_9.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_9_hu871ef3592b8a047b1d7b062f9c8d03d0_10974_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_9_hu871ef3592b8a047b1d7b062f9c8d03d0_10974_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1658&#34;
				height=&#34;159&#34;
				loading=&#34;lazy&#34;
				alt=&#34;CNAME 记录&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;CNAME 记录&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入仓库的 Settings 页面，找到 GitHub Pages 相应设置处：&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 109; flex-basis: 261px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_10.png&#34; data-size=&#34;949x870&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_10.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_10_hu80bb8eb10d8e00a201a3b57ece9a0edd_22937_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_10_hu80bb8eb10d8e00a201a3b57ece9a0edd_22937_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;949&#34;
				height=&#34;870&#34;
				loading=&#34;lazy&#34;
				alt=&#34;GitHub Pages 设置&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;GitHub Pages 设置&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按照 GitHub 的提示，将自定义域名填入 Custom Domain 处，并勾选 Enforce HTTPS，等待一段时间使 DNS 记录生效后，便可以成功的访问自己的域名来进入博客了。&lt;/p&gt;
&lt;p&gt;若是之后对文章进行了更新，便可以使用 git push 来进行同步：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
$ git add .
$ git status
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;add posts&amp;#34;&lt;/span&gt;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终我的博客现在大概长下面这样：&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 85; flex-basis: 205px&#34;&gt;
		&lt;a href=&#34;https://blog.pkulkw.me/p/myblog/blog_11.png&#34; data-size=&#34;1069x1248&#34;&gt;&lt;img src=&#34;https://blog.pkulkw.me/p/myblog/blog_11.png&#34;
				srcset=&#34;https://blog.pkulkw.me/p/myblog/blog_11_hu69fa72ebbdc1baaedf8c519947fb4824_68646_480x0_resize_box_3.png 480w, https://blog.pkulkw.me/p/myblog/blog_11_hu69fa72ebbdc1baaedf8c519947fb4824_68646_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1069&#34;
				height=&#34;1248&#34;
				loading=&#34;lazy&#34;
				alt=&#34;网站首页预览&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;网站首页预览&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;文章的大致内容大概就这么多，祝愿大家都可以顺利的建立起自己的小站。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
